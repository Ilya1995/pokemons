{"version":3,"sources":["store/index.js","components/Filter.js","components/Pagination.js","components/LinearIndeterminate.js","components/PanelDetails.js","components/Modal.js","components/PanelSummary.js","components/PokemonPanels.js","App.js","serviceWorker.js","index.js"],"names":["Store","pokemonsData","pokemons","totalCount","speciesPokemon","ability","loading","filter","name","type","setLoading","payload","setAbility","searchNames","pokemonNames","resNames","forEach","pokemon","indexOf","push","getAbility","url","fetch","method","headers","then","response","json","effect_entries","effect","catch","err","console","log","getPokemos","data","length","filterType","filterName","searchPokemon","pagination","offset","limit","count","requests","results","map","result","detailedInformation","Promise","all","responses","r","types","element","used","filtered","obj","slice","finally","getSpeciesPokemon","id","species","evolution_chain","evolution","chain","evolves_to","evolutionChain","img","sprites","front_default","decorate","observable","action","Filter","useState","setName","setType","Grid","container","direction","justify","alignItems","className","TextField","label","onChange","event","currentTarget","value","FormControl","InputLabel","Select","labelId","multiple","target","input","Input","MenuItem","key","Button","variant","disabled","onClick","Pagination","page","setPage","React","rowsPerPage","setRowsPerPage","TableContainer","component","Paper","Table","aria-label","TableFooter","TableRow","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","onChangePage","newPage","onChangeRowsPerPage","parseInt","useStyles","makeStyles","theme","root","width","marginTop","spacing","LinearIndeterminate","classes","LinearProgress","PanelDetails","ExpansionPanelDetails","TableBody","stats","stat","TableCell","scope","align","base_stat","Typography","List","ListItem","button","divider","ListItemText","primary","Fragment","src","alt","Modal","title","text","handleClose","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","color","autoFocus","observer","openModal","setOpen","handleAbility","stopPropagation","store","abilities","abilitie","bind","ExpansionPanelSummary","expandIcon","aria-controls","gutterBottom","TableHead","height","weight","base_experience","useEffect","expanded","setExpanded","panels","ExpansionPanel","CircularProgress","disableShrink","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b1e51222.chunk.js","sourcesContent":["import { decorate, observable, action } from 'mobx';\nimport 'whatwg-fetch';\n\nclass Store {\n  pokemonsData = { pokemons: [], totalCount: 0 };\n  speciesPokemon = null;\n  ability = null;\n  loading = false;\n  filter = { name: '', type: [] };\n\n  setLoading = payload => {\n    this.loading = payload;\n  };\n\n  setAbility = payload => {\n    this.ability = payload;\n  };\n\n  searchNames = pokemonNames => {\n    let resNames = [];\n    pokemonNames.forEach(pokemon => {\n      if (pokemon.name.indexOf(this.filter.name) !== -1) {\n        resNames.push(pokemon);\n      }\n    });\n    return resNames;\n  };\n\n  getAbility = url => {\n    fetch(url, {\n      method: 'get',\n      headers: {\n        'Content-type': 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(json => {\n        this.setAbility(json.effect_entries[0].effect);\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  getPokemos = data => {\n    this.setLoading(true);\n    if (this.filter.name || this.filter.type.length || data.filter) {\n      if (data.filter) {\n        this.filter = data.filter;\n      }\n\n      if (this.filter.type.length) {\n        this.filterType(data);\n      } else {\n        this.filterName(data);\n      }\n    } else {\n      this.searchPokemon(data);\n    }\n  };\n\n  searchPokemon = data => {\n    fetch(\n      `https://pokeapi.co/api/v2/pokemon?offset=${data.pagination.offset}&limit=${data.pagination.limit}`,\n      {\n        method: 'get',\n        headers: {\n          'Content-type': 'application/json',\n        },\n      }\n    )\n      .then(response => response.json())\n      .then(json => {\n        let totalCount = json.count;\n\n        let requests = json.results.map(result => fetch(result.url));\n        this.detailedInformation(requests, totalCount);\n      })\n      .catch(err => {\n        console.log(err);\n        this.setLoading(false);\n      });\n  };\n\n  filterType = data => {\n    let requests = this.filter.type.map(result =>\n      fetch(`https://pokeapi.co/api/v2/type/${result}`)\n    );\n    Promise.all(requests)\n      .then(responses => Promise.all(responses.map(r => r.json())))\n      .then(types => {\n        let pokemons = [];\n        types.forEach(type =>\n          type.pokemon.forEach(element => pokemons.push(element.pokemon))\n        );\n        var used = {};\n        var filtered = pokemons.filter(obj =>\n          obj.name in used ? 0 : (used[obj.name] = 1)\n        );\n        this.pagination(filtered, data.pagination);\n      })\n      .catch(err => {\n        console.log(err);\n        this.setLoading(false);\n      });\n  };\n\n  filterName = data => {\n    fetch('https://pokeapi.co/api/v2/pokemon?offset=0&limit=1000', {\n      method: 'get',\n      headers: {\n        'Content-type': 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(json => {\n        this.pagination(json.results, data.pagination);\n      })\n      .catch(err => {\n        console.log(err);\n        this.setLoading(false);\n      });\n  };\n\n  pagination = (data, pagination) => {\n    if (this.filter.name) {\n      data = this.searchNames(data);\n    }\n    let totalCount = data.length;\n    if (!pagination) {\n      pagination = { offset: 0, limit: 10 };\n    }\n\n    let requests = data\n      .slice(pagination.offset, pagination.offset + pagination.limit)\n      .map(pokemon => fetch(pokemon.url));\n    this.detailedInformation(requests, totalCount);\n  };\n\n  detailedInformation = (requests, totalCount) => {\n    Promise.all(requests)\n      .then(responses => Promise.all(responses.map(r => r.json())))\n      .then(pokemons => {\n        this.pokemonsData = { pokemons, totalCount };\n      })\n      .catch(err => {\n        console.log(err);\n      })\n      .finally(() => this.setLoading(false));\n  };\n\n  getSpeciesPokemon = id => {\n    if (this.speciesPokemon && this.speciesPokemon.id !== id) {\n      this.speciesPokemon = null;\n    }\n    let species;\n    fetch(`https://pokeapi.co/api/v2/pokemon-species/${id}`, {\n      method: 'get',\n      headers: {\n        'Content-type': 'application/json',\n      },\n    })\n      .then(response => response.json())\n      .then(json => {\n        species = json;\n        return fetch(json.evolution_chain.url);\n      })\n      .then(response => response.json())\n      .then(json => {\n        let evolution = [json.chain.species.name];\n        if (json.chain.evolves_to[0]) {\n          evolution.push(json.chain.evolves_to[0].species.name);\n          if (json.chain.evolves_to[0].evolves_to[0]) {\n            evolution.push(json.chain.evolves_to[0].evolves_to[0].species.name);\n          } else {\n            if (json.chain.evolves_to[1]) {\n              evolution.push(json.chain.evolves_to[1].species.name);\n            }\n          }\n        }\n\n        let requests = evolution.map(name =>\n          fetch(`https://pokeapi.co/api/v2/pokemon/${name}`)\n        );\n        Promise.all(requests)\n          .then(responses => Promise.all(responses.map(r => r.json())))\n          .then(pokemons => {\n            species.evolutionChain = pokemons.map(pokemon => {\n              return {\n                name: pokemon.name,\n                img: pokemon.sprites.front_default,\n              };\n            });\n            this.speciesPokemon = species;\n          });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n}\n\nStore = decorate(Store, {\n  pokemonsData: observable,\n  speciesPokemon: observable,\n  ability: observable,\n  loading: observable,\n  getSpeciesPokemon: action,\n  setAbility: action,\n  getPokemos: action,\n  detailedInformation: action,\n  setLoading: action,\n});\n\nexport default new Store();\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport InputLabel from '@material-ui/core/InputLabel';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport FormControl from '@material-ui/core/FormControl';\nimport Select from '@material-ui/core/Select';\nimport Input from '@material-ui/core/Input';\n\nconst Filter = ({ getPokemos }) => {\n  const [name, setName] = useState(null);\n  const [type, setType] = useState([]);\n\n  const types = [\n    'normal',\n    'fighting',\n    'flying',\n    'poison',\n    'ground',\n    'rock',\n    'bug',\n    'ghost',\n    'steel',\n    'fire',\n    'water',\n    'grass',\n    'electric',\n    'psychic',\n    'ice',\n    'dragon',\n    'dark',\n    'fairy',\n  ];\n\n  const handleChangeInput = event => {\n    setName(event.currentTarget.value);\n  };\n\n  const handleChangeSelect = event => {\n    setType(event.target.value);\n  };\n\n  return (\n    <Grid\n      container\n      direction=\"row\"\n      justify=\"flex-end\"\n      alignItems=\"flex-end\"\n      className=\"filter-container\"\n    >\n      <TextField\n        id=\"standard-basic\"\n        label=\"name\"\n        onChange={handleChangeInput}\n      />\n\n      <FormControl className=\"form-control\">\n        <InputLabel id=\"demo-mutiple-name-label\">Types</InputLabel>\n        <Select\n          labelId=\"demo-mutiple-name-label\"\n          id=\"demo-mutiple-name\"\n          multiple\n          value={type}\n          onChange={handleChangeSelect}\n          input={<Input />}\n        >\n          {types.map(name => (\n            <MenuItem key={name} value={name}>\n              {name}\n            </MenuItem>\n          ))}\n        </Select>\n      </FormControl>\n\n      <Button\n        variant=\"contained\"\n        disabled={!name && !type.length}\n        onClick={() => getPokemos({ filter: { name, type } })}\n      >\n        Search\n      </Button>\n    </Grid>\n  );\n};\n\nFilter.propTypes = {\n  getPokemos: PropTypes.func.isRequired,\n};\n\nexport default Filter;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport TablePagination from '@material-ui/core/TablePagination';\nimport TableRow from '@material-ui/core/TableRow';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport Paper from '@material-ui/core/Paper';\nimport Table from '@material-ui/core/Table';\nimport TableFooter from '@material-ui/core/TableFooter';\n\nconst Pagination = ({ count, getPokemos }) => {\n  const [page, setPage] = useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n    getPokemos({\n      pagination: { offset: newPage * rowsPerPage, limit: rowsPerPage },\n    });\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n    getPokemos({\n      pagination: { offset: 0, limit: parseInt(event.target.value, 10) },\n    });\n  };\n\n  return (\n    <TableContainer component={Paper}>\n      <Table aria-label=\"custom pagination table\">\n        <TableFooter>\n          <TableRow>\n            <TablePagination\n              rowsPerPageOptions={[10, 20, 50]}\n              count={count}\n              rowsPerPage={rowsPerPage}\n              page={page}\n              SelectProps={{\n                inputProps: { 'aria-label': 'rows per page' },\n                native: true,\n              }}\n              onChangePage={handleChangePage}\n              onChangeRowsPerPage={handleChangeRowsPerPage}\n            />\n          </TableRow>\n        </TableFooter>\n      </Table>\n    </TableContainer>\n  );\n};\n\nPagination.propTypes = {\n  count: PropTypes.number.isRequired,\n  getPokemos: PropTypes.func.isRequired,\n};\n\nexport default Pagination;\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LinearProgress from '@material-ui/core/LinearProgress';\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    width: '100%',\n    '& > * + *': {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nexport default function LinearIndeterminate() {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <LinearProgress />\n    </div>\n  );\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport LinearIndeterminate from './LinearIndeterminate';\n\nimport Typography from '@material-ui/core/Typography';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport Paper from '@material-ui/core/Paper';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { Grid } from '@material-ui/core';\n\nconst PanelDetails = ({ pokemon, speciesPokemon }) => {\n  return (\n    <>\n      <ExpansionPanelDetails>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"space-around\"\n          alignItems=\"flex-start\"\n        >\n          <TableContainer className=\"table-stats\">\n            <Table aria-label=\"simple table\">\n              <TableBody>\n                {pokemon.stats.map(stat => (\n                  <TableRow key={stat.stat.name}>\n                    <TableCell component=\"th\" scope=\"row\">\n                      {stat.stat.name}\n                    </TableCell>\n                    <TableCell align=\"right\">{stat.base_stat}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n          <div>\n            <Typography>Types pokemon:</Typography>\n            <List component=\"nav\" aria-label=\"mailbox folders\">\n              {pokemon.types.map(type => (\n                <ListItem button key={type.type.name} divider>\n                  <ListItemText primary={type.type.name} />\n                </ListItem>\n              ))}\n            </List>\n          </div>\n        </Grid>\n      </ExpansionPanelDetails>\n      <ExpansionPanelDetails>\n        {speciesPokemon ? (\n          <Grid\n            container\n            direction=\"column\"\n            justify=\"flex-start\"\n            alignItems=\"flex-start\"\n          >\n            <Typography>Evolution Chain</Typography>\n            <TableContainer component={Paper}>\n              <Table aria-label=\"simple table\">\n                <TableBody>\n                  <TableRow>\n                    {speciesPokemon.evolutionChain.map(chain => {\n                      return (\n                        <React.Fragment key={chain.name}>\n                          <TableCell align=\"right\">\n                            <img\n                              src={chain.img}\n                              className=\"image-pokemon\"\n                              alt=\"pokemon\"\n                            />\n                          </TableCell>\n                          <TableCell align=\"right\">{chain.name}</TableCell>\n                        </React.Fragment>\n                      );\n                    })}\n                  </TableRow>\n                </TableBody>\n              </Table>\n            </TableContainer>\n          </Grid>\n        ) : (\n          <LinearIndeterminate />\n        )}\n      </ExpansionPanelDetails>\n    </>\n  );\n};\n\nPanelDetails.propTypes = {\n  pokemon: PropTypes.object.isRequired,\n  speciesPokemon: PropTypes.object,\n};\n\nexport default PanelDetails;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport LinearIndeterminate from './LinearIndeterminate';\n\nconst Modal = ({ title, text, handleClose }) => {\n  return (\n    <div>\n      <Dialog\n        open={true}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n        <DialogContent>\n          {text ? (\n            <DialogContentText id=\"alert-dialog-description\">\n              {text}\n            </DialogContentText>\n          ) : (\n            <LinearIndeterminate />\n          )}\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nModal.propTypes = {\n  title: PropTypes.string.isRequired,\n  text: PropTypes.string.isRequired,\n  handleClose: PropTypes.func.isRequired,\n};\n\nexport default Modal;\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Typography from '@material-ui/core/Typography';\nimport TableHead from '@material-ui/core/TableHead';\nimport Table from '@material-ui/core/Table';\nimport TableBody from '@material-ui/core/TableBody';\nimport TableCell from '@material-ui/core/TableCell';\nimport TableContainer from '@material-ui/core/TableContainer';\nimport TableRow from '@material-ui/core/TableRow';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport { Button, Grid } from '@material-ui/core';\n\nimport Modal from './Modal';\nimport store from '../store';\nimport { observer } from 'mobx-react';\n\nconst PanelSummary = ({ pokemon }) => {\n  const [openModal, setOpen] = useState(false);\n\n  const handleAbility = (url, event) => {\n    event.stopPropagation();\n    setOpen(true);\n    store.getAbility(url);\n  };\n\n  const handleCloseModal = event => {\n    event.stopPropagation();\n    setOpen(false);\n    store.setAbility(null);\n  };\n\n  const abilities = pokemon.abilities.map(abilitie => {\n    return (\n      <Button\n        key={abilitie.ability.name}\n        onClick={handleAbility.bind(this, abilitie.ability.url)}\n      >\n        {abilitie.ability.name}\n      </Button>\n    );\n  });\n\n  return (\n    <ExpansionPanelSummary\n      expandIcon={<ExpandMoreIcon />}\n      aria-controls=\"panel1bh-content\"\n      id=\"panel1bh-header\"\n    >\n      <Grid\n        container\n        direction=\"row\"\n        justify=\"space-around\"\n        alignItems=\"center\"\n      >\n        <img\n          src={pokemon.sprites.front_default}\n          className=\"image-pokemon\"\n          alt=\"pokemon\"\n        />\n        <Typography variant=\"h5\" gutterBottom>\n          {pokemon.name}\n        </Typography>\n        <Typography className=\"typography-abilities\">{abilities}</Typography>\n        <TableContainer className=\"table-container\">\n          <Table aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>Number</TableCell>\n                <TableCell align=\"right\">Height</TableCell>\n                <TableCell align=\"right\">Weight</TableCell>\n                <TableCell align=\"right\">Base experience</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              <TableRow>\n                <TableCell component=\"th\" scope=\"row\">\n                  {pokemon.id}\n                </TableCell>\n                <TableCell align=\"right\">{pokemon.height / 10} m</TableCell>\n                <TableCell align=\"right\">{pokemon.weight / 10} kg</TableCell>\n                <TableCell align=\"right\">{pokemon.base_experience}</TableCell>\n              </TableRow>\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Grid>\n\n      {openModal ? (\n        <Modal\n          title=\"The ability the Pokémon may have.\"\n          text={store.ability}\n          handleClose={handleCloseModal}\n        />\n      ) : (\n        ''\n      )}\n    </ExpansionPanelSummary>\n  );\n};\n\nPanelSummary.propTypes = {\n  pokemon: PropTypes.object.isRequired,\n};\n\nexport default observer(PanelSummary);\n","import React, { useEffect, useState } from 'react';\nimport store from '../store';\nimport Filter from './Filter';\nimport Pagination from './Pagination';\nimport PanelDetails from './PanelDetails';\nimport PanelSummary from './PanelSummary';\n\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nimport { observer } from 'mobx-react';\nconst PokemonPanels = () => {\n  useEffect(() => {\n    store.getPokemos({ pagination: { offset: 0, limit: 10 } });\n  }, []);\n  const [expanded, setExpanded] = useState(null);\n  const handleChange = id => {\n    if (expanded === id) {\n      setExpanded(null);\n    } else {\n      store.getSpeciesPokemon(id);\n      setExpanded(id);\n    }\n  };\n\n  const panels = store.pokemonsData.pokemons.map(pokemon => {\n    return (\n      <ExpansionPanel\n        key={pokemon.id}\n        expanded={expanded === pokemon.id}\n        onChange={() => handleChange(pokemon.id)}\n      >\n        <PanelSummary pokemon={pokemon} />\n        <PanelDetails pokemon={pokemon} speciesPokemon={store.speciesPokemon} />\n      </ExpansionPanel>\n    );\n  });\n\n  return (\n    <div>\n      <h1 className=\"text-center\">Pokemon repository</h1>\n      <Filter getPokemos={store.getPokemos} />\n      {store.loading ? (\n        <CircularProgress className=\"circular-progress\" disableShrink />\n      ) : (\n        panels\n      )}\n\n      <Pagination\n        count={store.pokemonsData.totalCount}\n        getPokemos={store.getPokemos}\n      />\n    </div>\n  );\n};\n\nexport default observer(PokemonPanels);\n","import React from 'react';\nimport 'typeface-roboto';\nimport PokemonPanels from './components/PokemonPanels';\nimport { Container } from '@material-ui/core';\n\nconst App = () => {\n\n  return (\n    <Container maxWidth=\"md\">\n      <PokemonPanels />\n    </Container>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\nserviceWorker.unregister()\n"],"sourceRoot":""}