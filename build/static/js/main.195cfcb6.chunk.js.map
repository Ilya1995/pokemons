{"version":3,"sources":["store/index.js","components/Filter.js","components/Pagination.js","components/LinearIndeterminate.js","components/PanelDetails.js","components/Modal.js","components/PanelSummary.js","components/PokemonPanels.js","App.js","serviceWorker.js","index.js"],"names":["Store","pokemonsData","pokemons","totalCount","speciesPokemon","ability","loading","filter","name","type","setLoading","payload","setAbility","searchNames","pokemonNames","resNames","forEach","pokemon","indexOf","push","getAbility","url","fetch","method","headers","then","response","json","effect_entries","effect","catch","err","console","log","getPokemos","data","length","filterType","filterName","searchPokemon","pagination","offset","limit","count","requests","results","map","result","detailedInformation","Promise","all","responses","r","types","element","used","filtered","obj","slice","finally","getSpeciesPokemon","id","species","evolution_chain","evolution","chain","evolves_to","evolutionChain","img","sprites","front_default","decorate","observable","action","Filter","useState","setName","setType","TextField","label","onChange","event","currentTarget","value","FormControl","className","InputLabel","Select","labelId","multiple","target","input","Input","MenuItem","key","Button","variant","disabled","onClick","Pagination","page","setPage","React","rowsPerPage","setRowsPerPage","TableContainer","component","Paper","Table","aria-label","TableFooter","TableRow","TablePagination","rowsPerPageOptions","SelectProps","inputProps","native","onChangePage","newPage","onChangeRowsPerPage","parseInt","useStyles","makeStyles","theme","root","width","marginTop","spacing","LinearIndeterminate","classes","LinearProgress","PanelDetails","ExpansionPanelDetails","Grid","container","direction","justify","alignItems","TableBody","stats","stat","TableCell","scope","align","base_stat","Typography","List","ListItem","button","divider","ListItemText","primary","Fragment","src","alt","Modal","title","text","handleClose","Dialog","open","onClose","aria-labelledby","aria-describedby","DialogTitle","DialogContent","DialogContentText","DialogActions","color","autoFocus","observer","openModal","setOpen","handleAbility","stopPropagation","store","abilities","abilitie","bind","ExpansionPanelSummary","expandIcon","aria-controls","gutterBottom","TableHead","height","weight","base_experience","useEffect","expanded","setExpanded","panels","ExpansionPanel","CircularProgress","disableShrink","App","Container","maxWidth","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.195cfcb6.chunk.js","sourcesContent":["import { decorate, observable, action } from 'mobx';\r\nimport 'whatwg-fetch';\r\n\r\nclass Store {\r\n  pokemonsData = { pokemons: [], totalCount: 0 };\r\n  speciesPokemon = null;\r\n  ability = null;\r\n  loading = false;\r\n  filter = { name: '', type: [] };\r\n\r\n  setLoading = payload => {\r\n    this.loading = payload;\r\n  };\r\n\r\n  setAbility = payload => {\r\n    this.ability = payload;\r\n  };\r\n\r\n  searchNames = pokemonNames => {\r\n    let resNames = [];\r\n    pokemonNames.forEach(pokemon => {\r\n      if (pokemon.name.indexOf(this.filter.name) !== -1) {\r\n        resNames.push(pokemon);\r\n      }\r\n    });\r\n    return resNames;\r\n  };\r\n\r\n  getAbility = url => {\r\n    fetch(url, {\r\n      method: 'get',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        this.setAbility(json.effect_entries[0].effect);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  getPokemos = data => {\r\n    this.setLoading(true);\r\n    if (this.filter.name || this.filter.type.length || data.filter) {\r\n      if (data.filter) {\r\n        this.filter = data.filter;\r\n      }\r\n\r\n      if (this.filter.type.length) {\r\n        this.filterType(data);\r\n      } else {\r\n        this.filterName(data);\r\n      }\r\n    } else {\r\n      this.searchPokemon(data);\r\n    }\r\n  };\r\n\r\n  searchPokemon = data => {\r\n    fetch(\r\n      `https://pokeapi.co/api/v2/pokemon?offset=${data.pagination.offset}&limit=${data.pagination.limit}`,\r\n      {\r\n        method: 'get',\r\n        headers: {\r\n          'Content-type': 'application/json',\r\n        },\r\n      }\r\n    )\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        let totalCount = json.count;\r\n\r\n        let requests = json.results.map(result => fetch(result.url));\r\n        this.detailedInformation(requests, totalCount);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setLoading(false);\r\n      });\r\n  };\r\n\r\n  filterType = data => {\r\n    let requests = this.filter.type.map(result =>\r\n      fetch(`https://pokeapi.co/api/v2/type/${result}`)\r\n    );\r\n    Promise.all(requests)\r\n      .then(responses => Promise.all(responses.map(r => r.json())))\r\n      .then(types => {\r\n        let pokemons = [];\r\n        types.forEach(type =>\r\n          type.pokemon.forEach(element => pokemons.push(element.pokemon))\r\n        );\r\n        var used = {};\r\n        var filtered = pokemons.filter(obj =>\r\n          obj.name in used ? 0 : (used[obj.name] = 1)\r\n        );\r\n        this.pagination(filtered, data.pagination);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setLoading(false);\r\n      });\r\n  };\r\n\r\n  filterName = data => {\r\n    fetch('https://pokeapi.co/api/v2/pokemon?offset=0&limit=1000', {\r\n      method: 'get',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        this.pagination(json.results, data.pagination);\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n        this.setLoading(false);\r\n      });\r\n  };\r\n\r\n  pagination = (data, pagination) => {\r\n    if (this.filter.name) {\r\n      data = this.searchNames(data);\r\n    }\r\n    let totalCount = data.length;\r\n    if (!pagination) {\r\n      pagination = { offset: 0, limit: 10 };\r\n    }\r\n\r\n    let requests = data\r\n      .slice(pagination.offset, pagination.offset + pagination.limit)\r\n      .map(pokemon => fetch(pokemon.url));\r\n    this.detailedInformation(requests, totalCount);\r\n  };\r\n\r\n  detailedInformation = (requests, totalCount) => {\r\n    Promise.all(requests)\r\n      .then(responses => Promise.all(responses.map(r => r.json())))\r\n      .then(pokemons => {\r\n        this.pokemonsData = { pokemons, totalCount };\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      })\r\n      .finally(() => this.setLoading(false));\r\n  };\r\n\r\n  getSpeciesPokemon = id => {\r\n    if (this.speciesPokemon && this.speciesPokemon.id !== id) {\r\n      this.speciesPokemon = null;\r\n    }\r\n    let species;\r\n    fetch(`https://pokeapi.co/api/v2/pokemon-species/${id}`, {\r\n      method: 'get',\r\n      headers: {\r\n        'Content-type': 'application/json',\r\n      },\r\n    })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        species = json;\r\n        return fetch(json.evolution_chain.url);\r\n      })\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        let evolution = [json.chain.species.name];\r\n        if (json.chain.evolves_to[0]) {\r\n          evolution.push(json.chain.evolves_to[0].species.name);\r\n          if (json.chain.evolves_to[0].evolves_to[0]) {\r\n            evolution.push(json.chain.evolves_to[0].evolves_to[0].species.name);\r\n          } else {\r\n            if (json.chain.evolves_to[1]) {\r\n              evolution.push(json.chain.evolves_to[1].species.name);\r\n            }\r\n          }\r\n        }\r\n\r\n        let requests = evolution.map(name =>\r\n          fetch(`https://pokeapi.co/api/v2/pokemon/${name}`)\r\n        );\r\n        Promise.all(requests)\r\n          .then(responses => Promise.all(responses.map(r => r.json())))\r\n          .then(pokemons => {\r\n            species.evolutionChain = pokemons.map(pokemon => {\r\n              return {\r\n                name: pokemon.name,\r\n                img: pokemon.sprites.front_default,\r\n              };\r\n            });\r\n            this.speciesPokemon = species;\r\n          });\r\n      })\r\n      .catch(err => {\r\n        console.log(err);\r\n      });\r\n  };\r\n}\r\n\r\nStore = decorate(Store, {\r\n  pokemonsData: observable,\r\n  speciesPokemon: observable,\r\n  ability: observable,\r\n  loading: observable,\r\n  getSpeciesPokemon: action,\r\n  setAbility: action,\r\n  getPokemos: action,\r\n  detailedInformation: action,\r\n  setLoading: action,\r\n});\r\n\r\nexport default new Store();\r\n","import React, { useState } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport Input from '@material-ui/core/Input';\r\n\r\nconst Filter = ({ getPokemos }) => {\r\n  const [name, setName] = useState(null);\r\n  const [type, setType] = useState([]);\r\n\r\n  const types = [\r\n    'normal',\r\n    'fighting',\r\n    'flying',\r\n    'poison',\r\n    'ground',\r\n    'rock',\r\n    'bug',\r\n    'ghost',\r\n    'steel',\r\n    'fire',\r\n    'water',\r\n    'grass',\r\n    'electric',\r\n    'psychic',\r\n    'ice',\r\n    'dragon',\r\n    'dark',\r\n    'fairy',\r\n  ];\r\n\r\n  const handleChangeInput = event => {\r\n    setName(event.currentTarget.value);\r\n  };\r\n\r\n  const handleChangeSelect = event => {\r\n    setType(event.target.value);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <TextField\r\n        id=\"standard-basic\"\r\n        label=\"name\"\r\n        onChange={handleChangeInput}\r\n      />\r\n\r\n      <FormControl className=\"form-control\">\r\n        <InputLabel id=\"demo-mutiple-name-label\">Types</InputLabel>\r\n        <Select\r\n          labelId=\"demo-mutiple-name-label\"\r\n          id=\"demo-mutiple-name\"\r\n          multiple\r\n          value={type}\r\n          onChange={handleChangeSelect}\r\n          input={<Input />}\r\n        >\r\n          {types.map(name => (\r\n            <MenuItem key={name} value={name}>\r\n              {name}\r\n            </MenuItem>\r\n          ))}\r\n        </Select>\r\n      </FormControl>\r\n\r\n      <Button\r\n        variant=\"contained\"\r\n        disabled={!name && !type.length}\r\n        onClick={() => getPokemos({ filter: { name, type } })}\r\n      >\r\n        Search\r\n      </Button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import React, { useState } from 'react';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\n\r\nconst Pagination = ({ count, getPokemos }) => {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = React.useState(10);\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n    getPokemos({\r\n      pagination: { offset: newPage * rowsPerPage, limit: rowsPerPage },\r\n    });\r\n  };\r\n\r\n  const handleChangeRowsPerPage = event => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n    getPokemos({\r\n      pagination: { offset: 0, limit: parseInt(event.target.value, 10) },\r\n    });\r\n  };\r\n\r\n  return (\r\n    <TableContainer component={Paper}>\r\n      <Table aria-label=\"custom pagination table\">\r\n        <TableFooter>\r\n          <TableRow>\r\n            <TablePagination\r\n              rowsPerPageOptions={[10, 20, 50]}\r\n              count={count}\r\n              rowsPerPage={rowsPerPage}\r\n              page={page}\r\n              SelectProps={{\r\n                inputProps: { 'aria-label': 'rows per page' },\r\n                native: true,\r\n              }}\r\n              onChangePage={handleChangePage}\r\n              onChangeRowsPerPage={handleChangeRowsPerPage}\r\n            />\r\n          </TableRow>\r\n        </TableFooter>\r\n      </Table>\r\n    </TableContainer>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport LinearProgress from '@material-ui/core/LinearProgress';\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: '100%',\r\n    '& > * + *': {\r\n      marginTop: theme.spacing(2),\r\n    },\r\n  },\r\n}));\r\n\r\nexport default function LinearIndeterminate() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <LinearProgress />\r\n    </div>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport LinearIndeterminate from './LinearIndeterminate';\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nexport default function PanelDetails({ pokemon, speciesPokemon }) {\r\n  return (\r\n    <>\r\n      <ExpansionPanelDetails>\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"space-around\"\r\n          alignItems=\"flex-start\"\r\n        >\r\n          <TableContainer className=\"table-stats\" component={Paper}>\r\n            <Table aria-label=\"simple table\">\r\n              <TableBody>\r\n                {pokemon.stats.map(stat => (\r\n                  <TableRow key={stat.stat.name}>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                      {stat.stat.name}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{stat.base_stat}</TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </TableContainer>\r\n          <div>\r\n            <Typography>Types pokemon:</Typography>\r\n            <List component=\"nav\" aria-label=\"mailbox folders\">\r\n              {pokemon.types.map(type => (\r\n                <ListItem button key={type.type.name} divider>\r\n                  <ListItemText primary={type.type.name} />\r\n                </ListItem>\r\n              ))}\r\n            </List>\r\n          </div>\r\n        </Grid>\r\n      </ExpansionPanelDetails>\r\n      <ExpansionPanelDetails>\r\n        {speciesPokemon ? (\r\n          <div>\r\n            <Typography>Evolution Chain</Typography>\r\n            <TableContainer component={Paper}>\r\n              <Table aria-label=\"simple table\">\r\n                <TableBody>\r\n                  <TableRow>\r\n                    {speciesPokemon.evolutionChain.map(chain => {\r\n                      return (\r\n                        <React.Fragment key={chain.name}>\r\n                          <TableCell align=\"right\">\r\n                            <img\r\n                              src={chain.img}\r\n                              className=\"image-pokemon\"\r\n                              alt=\"pokemon\"\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell align=\"right\">{chain.name}</TableCell>\r\n                        </React.Fragment>\r\n                      );\r\n                    })}\r\n                  </TableRow>\r\n                </TableBody>\r\n              </Table>\r\n            </TableContainer>\r\n          </div>\r\n        ) : (\r\n          <LinearIndeterminate />\r\n        )}\r\n      </ExpansionPanelDetails>\r\n    </>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport LinearIndeterminate from './LinearIndeterminate';\r\n\r\nconst Modal = ({ title, text, handleClose }) => {\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={true}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\r\n        <DialogContent>\r\n          {text ? (\r\n            <DialogContentText id=\"alert-dialog-description\">\r\n              {text}\r\n            </DialogContentText>\r\n          ) : (\r\n            <LinearIndeterminate />\r\n          )}\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\r\n            Close\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;\r\n","import React, { useState } from 'react';\r\n\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\r\nimport { Button, Grid } from '@material-ui/core';\r\n\r\nimport Modal from './Modal';\r\nimport store from '../store';\r\nimport { observer } from 'mobx-react';\r\n\r\nconst PanelSummary = ({ pokemon }) => {\r\n  const [openModal, setOpen] = useState(false);\r\n\r\n  const handleAbility = (url, event) => {\r\n    event.stopPropagation();\r\n    setOpen(true);\r\n    store.getAbility(url);\r\n  };\r\n\r\n  const handleCloseModal = event => {\r\n    event.stopPropagation();\r\n    setOpen(false);\r\n    store.setAbility(null);\r\n  };\r\n\r\n  const abilities = pokemon.abilities.map(abilitie => {\r\n    return (\r\n      <Button\r\n        key={abilitie.ability.name}\r\n        onClick={handleAbility.bind(this, abilitie.ability.url)}\r\n      >\r\n        {abilitie.ability.name}\r\n      </Button>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <ExpansionPanelSummary\r\n      expandIcon={<ExpandMoreIcon />}\r\n      aria-controls=\"panel1bh-content\"\r\n      id=\"panel1bh-header\"\r\n    >\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justify=\"space-around\"\r\n        alignItems=\"center\"\r\n      >\r\n        <img\r\n          src={pokemon.sprites.front_default}\r\n          className=\"image-pokemon\"\r\n          alt=\"pokemon\"\r\n        />\r\n        <Typography variant=\"h5\" gutterBottom>\r\n          {pokemon.name}\r\n        </Typography>\r\n        <Typography className=\"typography-abilities\">{abilities}</Typography>\r\n        <TableContainer className=\"table-container\">\r\n          <Table aria-label=\"simple table\">\r\n            <TableHead>\r\n              <TableRow>\r\n                <TableCell>Number</TableCell>\r\n                <TableCell align=\"right\">Height</TableCell>\r\n                <TableCell align=\"right\">Weight</TableCell>\r\n                <TableCell align=\"right\">Base experience</TableCell>\r\n              </TableRow>\r\n            </TableHead>\r\n            <TableBody>\r\n              <TableRow>\r\n                <TableCell component=\"th\" scope=\"row\">\r\n                  {pokemon.id}\r\n                </TableCell>\r\n                <TableCell align=\"right\">{pokemon.height / 10} m</TableCell>\r\n                <TableCell align=\"right\">{pokemon.weight / 10} kg</TableCell>\r\n                <TableCell align=\"right\">{pokemon.base_experience}</TableCell>\r\n              </TableRow>\r\n            </TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n      </Grid>\r\n\r\n      {openModal ? (\r\n        <Modal\r\n          title=\"The ability the Pokémon may have.\"\r\n          text={store.ability}\r\n          handleClose={handleCloseModal}\r\n        />\r\n      ) : (\r\n        ''\r\n      )}\r\n    </ExpansionPanelSummary>\r\n  );\r\n};\r\n\r\nexport default observer(PanelSummary);\r\n","import React, { useEffect, useState } from 'react';\r\nimport store from '../store';\r\nimport Filter from './Filter';\r\nimport Pagination from './Pagination';\r\nimport PanelDetails from './PanelDetails';\r\nimport PanelSummary from './PanelSummary';\r\n\r\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\n\r\nimport { observer } from 'mobx-react';\r\nconst PokemonPanels = () => {\r\n  useEffect(() => {\r\n    store.getPokemos({ pagination: { offset: 0, limit: 10 } });\r\n  }, []);\r\n  const [expanded, setExpanded] = useState(null);\r\n  const handleChange = id => {\r\n    if (expanded === id) {\r\n      setExpanded(null);\r\n    } else {\r\n      store.getSpeciesPokemon(id);\r\n      setExpanded(id);\r\n    }\r\n  };\r\n\r\n  const panels = store.pokemonsData.pokemons.map(pokemon => {\r\n    return (\r\n      <ExpansionPanel\r\n        key={pokemon.id}\r\n        expanded={expanded === pokemon.id}\r\n        onChange={() => handleChange(pokemon.id)}\r\n      >\r\n        <PanelSummary pokemon={pokemon} />\r\n        <PanelDetails pokemon={pokemon} speciesPokemon={store.speciesPokemon} />\r\n      </ExpansionPanel>\r\n    );\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h1>Pokemon repository</h1>\r\n      <Filter getPokemos={store.getPokemos} />\r\n      {store.loading ? (\r\n        <CircularProgress className=\"circular-progress\" disableShrink />\r\n      ) : (\r\n        panels\r\n      )}\r\n\r\n      <Pagination\r\n        count={store.pokemonsData.totalCount}\r\n        getPokemos={store.getPokemos}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default observer(PokemonPanels);\r\n","import React from 'react';\r\nimport 'typeface-roboto';\r\nimport PokemonPanels from './components/PokemonPanels';\r\nimport { Container } from '@material-ui/core';\r\n\r\nconst App = () => {\r\n\r\n  return (\r\n    <Container maxWidth=\"md\">\r\n      <PokemonPanels />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\nReactDOM.render(<App />, document.getElementById('root'))\r\n\r\nserviceWorker.unregister()\r\n"],"sourceRoot":""}